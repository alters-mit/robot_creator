using System.IO;
using System;
using UnityEditor;


/// <summary>
/// Export this project to a .unitypackage file in the tdw repo.
/// Only use this if you are a backend TDW developer.
/// </summary>
public static class Exporter
{
    /// <summary>
    /// Export the assets to a Unity package.
    /// </summary>
    [MenuItem("TDW/Export to TDW")]
    public static void Export()
    {
        // The paths of each asset.
        string[] paths = new string[]
        {
            "Assets/Scripts/Util.cs",
            "Assets/Scripts/ExpectedDriveAxis.cs",
            "Assets/Scripts/DriveAxis.cs",
            "Assets/Scripts/CenterOfMass.cs",
            "Assets/Scripts/Editor/Creator.cs",
            "Assets/Scripts/Editor/RosImporter.cs",
            "Assets/Scenes/SampleScene.unity"
        };

        // Get the destination location.
        string destination = null;
        // Get the path to the config file generated by tdw_dev 
        // (See documentation in TDWBase).
        string configPath = Path.Combine(
            Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
            "tdw_config/config.ini");
        // Read the config file.
        string[] lines = File.ReadAllLines(configPath);
        // Find the path to the tdw repo.
        for (int i = 0; i < lines.Length; i++)
        {
            lines[i] = lines[i].Trim();
            if (lines[i].StartsWith("tdw="))
            {
                string tdw = lines[i].Split('=')[1];
                // Return the expected path to the .unitypackage file.
                destination = Path.Combine(tdw, "Python/tdw/robot_creator.unitypackage");
            }
        }
        if (destination == null)
        {
            throw new Exception("Couldn't find tdw repo.");
        }

        AssetDatabase.ExportPackage(paths, destination, 
            ExportPackageOptions.IncludeDependencies);
    }
} 